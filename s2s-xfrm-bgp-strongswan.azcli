rg=s2s-frr-xfrm-strongswan
location=centralindia

site1_vnet_name=site1
site1_vnet_address=10.1.0.0/16
site1_gw_subnet_name=gw
site1_gw_subnet_address=10.1.0.0/24
site1_gw_asn=65501
site1_vm_subnet_name=vm
site1_vm_subnet_address=10.1.1.0/24

site2_vnet_name=site2
site2_vnet_address=10.2.0.0/16
site2_gw_subnet_name=gw
site2_gw_subnet_address=10.2.0.0/24
site2_gw_asn=65502
site2_vm_subnet_name=vm
site2_vm_subnet_address=10.2.1.0/24

advertised_address1=1.1.1.1/32
advertised_address2=2.2.2.2/32
admin_username=$(whoami)
myip=$(curl -s4 https://ifconfig.co/)
psk=secret12345
vm_size=Standard_B2ats_v2

cloudinit_file=cloudinit.txt
cat <<EOF > $cloudinit_file
#cloud-config
runcmd:
  - curl -s https://deb.frrouting.org/frr/keys.gpg | sudo tee /usr/share/keyrings/frrouting.gpg > /dev/null
  - echo deb [signed-by=/usr/share/keyrings/frrouting.gpg] https://deb.frrouting.org/frr \$(lsb_release -s -c) frr-stable | sudo tee -a /etc/apt/sources.list.d/frr.list
  - sudo apt update && sudo apt install -y frr frr-pythontools
  - sudo apt install -y strongswan strongswan-swanctl inetutils-traceroute net-tools
  - sudo sed -i "/bgpd=no/ s//bgpd=yes/" /etc/frr/daemons
  - sudo service frr restart
  - cp /etc/ipsec.conf /etc/ipsec.conf.bak
  - cp /etc/ipsec.secrets /etc/ipsec.secrets.bak
  - echo "net.ipv4.conf.all.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - echo "net.ipv4.conf.default.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - sudo sysctl -p
EOF

function first_ip(){
    subnet=$1
    IP=$(echo $subnet | cut -d/ -f 1)
    IP_HEX=$(printf '%.2X%.2X%.2X%.2X\n' `echo $IP | sed -e 's/\./ /g'`)
    NEXT_IP_HEX=$(printf %.8X `echo $(( 0x$IP_HEX + 1 ))`)
    NEXT_IP=$(printf '%d.%d.%d.%d\n' `echo $NEXT_IP_HEX | sed -r 's/(..)/0x\1 /g'`)
    echo "$NEXT_IP"
}

# Resource Groups
echo -e "\e[1;36mCreating $rg Resource Group...\e[0m"
az group create -l $location -n $rg -o none

# site1 vnet
echo -e "\e[1;36mCreating $site1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $site1_vnet_name -l $location --address-prefixes $site1_vnet_address --subnet-name $site1_vm_subnet_name --subnet-prefixes $site1_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $site1_gw_subnet_name --address-prefixes $site1_gw_subnet_address --vnet-name $site1_vnet_name -o none

# site2 vnet
echo -e "\e[1;36mCreating $site2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $site2_vnet_name -l $location --address-prefixes $site2_vnet_address --subnet-name $site2_vm_subnet_name --subnet-prefixes $site2_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $site2_gw_subnet_name --address-prefixes $site2_gw_subnet_address --vnet-name $site2_vnet_name -o none

# site1 gw vm
echo -e "\e[1;36mDeploying $site1_vnet_name-gw VM...\e[0m"
az network public-ip create -g $rg -n $site1_vnet_name-gw -l $location --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $site1_vnet_name-gw -l $location --vnet-name $site1_vnet_name --subnet $site1_gw_subnet_name --ip-forwarding true --public-ip-address $site1_vnet_name-gw -o none
az vm create -g $rg -n $site1_vnet_name-gw -l $location --image Ubuntu2404 --nics $site1_vnet_name-gw --os-disk-name $site1_vnet_name-gw --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file -o none
# site1 gw details
site1_gw_pubip=$(az network public-ip show -g $rg -n $site1_vnet_name-gw --query ipAddress -o tsv | tr -d '\r') && echo $site1_vnet_name-gw public ip: $site1_gw_pubip
site1_gw_private_ip=$(az network nic show -g $rg -n $site1_vnet_name-gw --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r')  && echo $site1_vnet_name-gw private ip: $site1_gw_private_ip
site1_gw_nic_default_gw=$(first_ip $site1_gw_subnet_address) && echo $site1_vnet_name-gw default gateway ip: $site1_gw_nic_default_gw

# site2 gw vm
echo -e "\e[1;36mDeploying $site2_vnet_name-gw VM...\e[0m"
az network public-ip create -g $rg -n $site2_vnet_name-gw -l $location --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $site2_vnet_name-gw -l $location --vnet-name $site2_vnet_name --subnet $site2_gw_subnet_name --ip-forwarding true --public-ip-address $site2_vnet_name-gw -o none
az vm create -g $rg -n $site2_vnet_name-gw -l $location --image Ubuntu2404 --nics $site2_vnet_name-gw --os-disk-name $site2_vnet_name-gw --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file -o none
# site2 gw details
site2_gw_pubip=$(az network public-ip show -g $rg -n $site2_vnet_name-gw --query ipAddress -o tsv | tr -d '\r') && echo $site2_vnet_name-gw public ip: $site2_gw_pubip
site2_gw_private_ip=$(az network nic show -g $rg -n $site2_vnet_name-gw --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r')  && echo $site2_vnet_name-gw private ip: $site2_gw_private_ip
site2_gw_nic_default_gw=$(first_ip $site2_gw_subnet_address) && echo $site2_vnet_name-gw default gateway ip: $site2_gw_nic_default_gw

# clear up the cloudinit file
rm $cloudinit_file

#######################
# site1 VPN Config  #
#######################
echo -e "\e[1;36mCreating S2S/BGP VPN Config files for $site1_vnet_name-gw gateway VM...\e[0m"
# XRFM interfaces and static routes
# Note these changes are not reboot-persistent!!!
echo "Creating XFRM interfaces..."
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip link add ipsec0 type xfrm dev eth0 if_id 41"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip link set ipsec0 up"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip route add ${site2_gw_private_ip}/32 dev ipsec0"
echo "Adding routes..."
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip route add ${site2_gw_pubip}/32 via $site1_gw_nic_default_gw"
myip=$(curl -s4 ifconfig.co) && echo "Installing route for $myip..."
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip route add ${myip}/32 via $site1_gw_nic_default_gw" # To not lose SSH connectivity
# However, we need to install throw routes in route table 220
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip route add throw ${site2_gw_pubip}/32 table 220"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip route add throw ${myip}/32 table 220"

# StrongSwan config file
swanctl_file=~/swanctl.conf
cat <<EOF > $swanctl_file
connections {
   $site2_vnet_name-gw {
        local_addrs  = $site1_gw_private_ip
        remote_addrs = $site2_gw_pubip
        version = 2
        proposals = aes256-sha1-modp1024,aes192-sha256-modp3072,default
        keyingtries = 0
        encap = yes
        local {
            auth = psk
            id = $site1_gw_pubip
        }
        remote {
            auth = psk
            id = $site2_gw_pubip
            revocation = relaxed
        }
        children {
            s2s0 {
                local_ts = 0.0.0.0/0
                remote_ts = 0.0.0.0/0
                esp_proposals = aes256-sha1,default
                dpd_action = restart
                start_action = trap
                rekey_time = 3600
            }
        }
        if_id_in = 41
        if_id_out = 41
   }
}
secrets {
   # PSK secret
   ike-1 {
        id-0 = $site2_gw_pubip
        secret = "$psk" 
   }
}
EOF

# frr.conf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 10.2
frr defaults traditional
hostname $site1_vnet_name-gw
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $advertised_address1 $site1_gw_nic_default_gw
ip route $site1_vnet_address $site1_gw_nic_default_gw
ip route $site2_gw_private_ip/32 $site1_gw_nic_default_gw
!
router bgp $site1_gw_asn
 bgp router-id $site1_gw_private_ip
 no bgp ebgp-requires-policy
 neighbor $site2_gw_private_ip remote-as $site2_gw_asn
 neighbor $site2_gw_private_ip description $site2_vnet_name-gw
 neighbor $site2_gw_private_ip ebgp-multihop 2
 !
 address-family ipv4 unicast
  network $advertised_address1
  network $site1_vnet_address
  neighbor $site2_gw_private_ip soft-reconfiguration inbound
 exit-address-family
exit
!
EOF

##### copy files to onprem gw
echo -e "\e[1;36mCopying and applying S2S/BGP VPN Config files to $site1_vnet_name-gw gateway VM...\e[0m"
scp -o StrictHostKeyChecking=no $swanctl_file $frr_conf_file $site1_gw_pubip:/home/$admin_username
# This is needed for clients to connect to internet through onprem gw
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo mv /home/$admin_username/frr.conf /etc/frr/frr.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo mv /home/$admin_username/swanctl.conf /etc/swanctl/"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo swanctl --load-all"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ipsec status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ipsec statusall"

# clean up config files
rm $swanctl_file $frr_conf_file


#######################
# site2 VPN Config  #
#######################
echo -e "\e[1;36mCreating S2S/BGP VPN Config files for $site2_vnet_name-gw gateway VM...\e[0m"

# XRFM interfaces and static routes
# Note these changes are not reboot-persistent!!!
echo "Creating XFRM interfaces..."
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip link add ipsec0 type xfrm dev eth0 if_id 41"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip link set ipsec0 up"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip route add ${site1_gw_private_ip}/32 dev ipsec0"
echo "Adding routes..."
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip route add ${site1_gw_pubip}/32 via $site2_gw_nic_default_gw"
myip=$(curl -s4 ifconfig.co) && echo "Installing route for $myip..."
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip route add ${myip}/32 via $site2_gw_nic_default_gw" # To not lose SSH connectivity
# However, we need to install throw routes in route table 220
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip route add throw ${site1_gw_pubip}/32 table 220"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip route add throw ${myip}/32 table 220"

# StrongSwan config file
swanctl_file=~/swanctl.conf
cat <<EOF > $swanctl_file
connections {
   $site1_vnet_name-gw {
        local_addrs  = $site2_gw_private_ip
        remote_addrs = $site1_gw_pubip
        version = 2
        proposals = aes256-sha1-modp1024,aes192-sha256-modp3072,default
        keyingtries = 0
        encap = yes
        local {
            auth = psk
            id = $site2_gw_pubip
        }
        remote {
            auth = psk
            id = $site1_gw_pubip
            revocation = relaxed
        }
        children {
            s2s0 {
                local_ts = 0.0.0.0/0
                remote_ts = 0.0.0.0/0
                esp_proposals = aes256-sha1,default
                dpd_action = restart
                start_action = trap
                rekey_time = 3600
            }
        }
        if_id_in = 41
        if_id_out = 41
   }
}
secrets {
   # PSK secret
   ike-1 {
        id-0 = $site1_gw_pubip
        secret = "$psk" 
   }
}
EOF

# frr.conf
frr_conf_file=~/frr.conf
cat <<EOF > $frr_conf_file
frr version 10.2
frr defaults traditional
hostname $site2_vnet_name-gw
log syslog informational
no ipv6 forwarding
service integrated-vtysh-config
!
ip route $advertised_address2 $site2_gw_nic_default_gw
ip route $site2_vnet_address $site2_gw_nic_default_gw
ip route $site1_gw_private_ip/32 $site2_gw_nic_default_gw
!
router bgp $site2_gw_asn
 bgp router-id $site2_gw_private_ip
 no bgp ebgp-requires-policy
 neighbor $site1_gw_private_ip remote-as $site1_gw_asn
 neighbor $site1_gw_private_ip description $site1_vnet_name-gw
 neighbor $site1_gw_private_ip ebgp-multihop 2
 !
 address-family ipv4 unicast
  network $advertised_address2
  network $site2_vnet_address
  neighbor $site1_gw_private_ip soft-reconfiguration inbound
 exit-address-family
exit
!
EOF

##### copy files to onprem gw
echo -e "\e[1;36mCopying and applying S2S/BGP VPN Config files to $site2_vnet_name-gw gateway VM...\e[0m"
scp -o StrictHostKeyChecking=no $swanctl_file $frr_conf_file $site2_gw_pubip:/home/$admin_username
# This is needed for clients to connect to internet through onprem gw
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo mv /home/$admin_username/frr.conf /etc/frr/frr.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo mv /home/$admin_username/swanctl.conf /etc/swanctl/"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo swanctl --load-all"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ipsec status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ipsec statusall"

# clean up config files
rm $swanctl_file $frr_conf_file

#############
# Diagnosis #
#############
echo -e "\e[1;36mReloading swanstrong config on $site1_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo swanctl --load-all"
echo -e "\e[1;36mReloading swanstrong config on $site2_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo swanctl --load-all"

echo -e "\e[1;36mRestarting frr bgp service on $site1_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo service frr restart"
echo -e "\e[1;36mRestarting frr bgp service on $site2_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo service frr restart"

echo -e "\e[1;36mChecking the IPsec VPN tunnel on $site1_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ipsec status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "ip a"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo swanctl -l && sudo swanctl -L"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo ip xfrm state && sudo ip xfrm policy"
echo -e "\e[1;36mChecking the IPsec VPN tunnel on $site2_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ipsec status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "ip a"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo swanctl -l && sudo swanctl -L"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo ip xfrm state && sudo ip xfrm policy"

echo -e "\e[1;36mTring to checking reachability from $site1_vnet_name-gw vm to $site2_vnet_name-gw...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "ping -c 3 $site2_gw_private_ip"
echo -e "\e[1;36mTring to checking reachability from $site2_vnet_name-gw vm to $site1_vnet_name-gw...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "ping -c 3 $site1_gw_private_ip"

echo -e "\e[1;36mChecking BGP routing on $site1_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site1_gw_pubip "sudo vtysh -c 'show bgp summary' && sudo vtysh -c 'show bgp all' && sudo vtysh -c 'show bgp all' && sudo vtysh -c 'show int brief' && sudo vtysh -c 'show ip route'"

echo -e "\e[1;36mChecking BGP routing on $site2_vnet_name-gw gateway vm...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $site2_gw_pubip "sudo vtysh -c 'show bgp summary' && sudo vtysh -c 'show bgp all' && sudo vtysh -c 'show bgp all' && sudo vtysh -c 'show int brief' && sudo vtysh -c 'show ip route'"

#cleanup
# az group delete -g $rg -y --no-wait